generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.gen"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:goperasidatabase123@db.goperasi.id:5432/lmtd?schema=public&pool_timeout=0"
}

model discount {
  id           String         @id(map: "discount_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  code         String         @unique(map: "discount_code")
  date_start   DateTime       @db.Timestamp(6)
  date_end     DateTime       @db.Timestamp(6)
  price        Decimal?       @db.Decimal(18, 3)
  percent      Float?         @db.Real
  max_precent  Float?         @db.Real
  description  String?
  invoice_item invoice_item[]
}

model feature {
  id                 String         @id(map: "feature_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  feature            Json?
  price              Decimal        @db.Decimal(18, 3)
  created_at         DateTime?      @default(now()) @db.Timestamp(6)
  updated_at         DateTime?      @default(now()) @db.Timestamp(6)
  name               String
  trial_duration     Int?
  subscribe_duration Int?
  invoice_item       invoice_item[]
}

model field {
  id      String @id(map: "field_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_site String @db.Uuid
  name    String
  data    Json
  slug    String @default("")
  idx     Int    @default(autoincrement())
  site    site   @relation(fields: [id_site], references: [id], onDelete: Cascade)
}

model invoice {
  id           String         @id(map: "invoice_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code         String
  user_id      String         @db.Uuid
  status       String
  total        Decimal        @default(0) @db.Decimal(18, 3)
  due_date     DateTime?      @default(now()) @db.Timestamp(6)
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  user         user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoice_item invoice_item[]
  payment      payment[]
}

model invoice_item {
  id           String    @id(map: "invoice_item_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id   String    @db.Uuid
  feature_id   String    @db.Uuid
  discount_id  String?   @db.Uuid
  price        Decimal   @default(0) @db.Decimal(18, 3)
  discount_val Decimal   @default(0) @db.Decimal(18, 3)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  discount     discount? @relation(fields: [discount_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  feature      feature   @relation(fields: [feature_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoice      invoice   @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id                                      String    @id(map: "organization_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                    String
  created_at                              DateTime? @default(now()) @db.Timestamp(6)
  updated_at                              DateTime? @db.Timestamp(6)
  user_created                            String?   @db.Uuid
  user_organization_user_createdTouser    user?     @relation("organization_user_createdTouser", fields: [user_created], references: [id], onDelete: NoAction, onUpdate: NoAction)
  site                                    site[]
  user_user_id_organizationToorganization user[]    @relation("user_id_organizationToorganization")
}

model page {
  id           String    @id(map: "page_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  url          String
  content_tree Json
  id_site      String    @db.Uuid
  field_names  Json      @default("{}")
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  local_js     String    @default("")
  local_script String    @default("")
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  site         site      @relation(fields: [id_site], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model payment {
  id                    String            @id(map: "payment_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nominal               Decimal           @default(0) @db.Decimal(18, 3)
  id_invoice            String            @db.Uuid
  type                  String?           @db.VarChar(10)
  payment_method        String            @default("CC") @db.VarChar(30)
  payment_method_detail Json?
  status                String
  payment_date          DateTime?         @db.Timestamp(6)
  expired_date          DateTime          @db.Timestamp(6)
  description           String
  created_at            DateTime?         @default(now()) @db.Timestamp(6)
  updated_at            DateTime?         @default(now()) @db.Timestamp(6)
  invoice               invoice           @relation(fields: [id_invoice], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payment_history       payment_history[]
}

model payment_history {
  id         String    @id(map: "payment_history_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  payment_id String    @db.Uuid
  status     String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  payment    payment   @relation(fields: [payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model site {
  id               String         @id(map: "site_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  colors           Json
  favicon          String
  domain           String         @unique(map: "site_domain")
  id_user          String         @db.Uuid
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  is_template      Boolean?       @default(false)
  template_preview String?
  field_config     Json?
  id_organization  String?        @db.Uuid
  updated_at       DateTime?      @default(now()) @db.Timestamp(6)
  field            field[]
  page             page[]
  organization     organization?  @relation(fields: [id_organization], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user           @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
  site_section     site_section[]
}

model site_section {
  id           String    @id(map: "section_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_site      String    @db.Uuid
  name         String
  content_tree Json
  is_mobile    Boolean   @default(true)
  is_desktop   Boolean   @default(true)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  site         site      @relation(fields: [id_site], references: [id], onDelete: Cascade, map: "section_id_site_fkey")
}

model user {
  id                                              String         @id(map: "user_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username                                        String
  password                                        String
  phone                                           String
  email                                           String
  created_at                                      DateTime?      @default(now()) @db.Timestamp(6)
  token_reset_password                            String?
  token_reset_password_expired                    DateTime?      @db.Timestamp(6)
  id_organization                                 String?        @db.Uuid
  updated_at                                      DateTime?      @default(now()) @db.Timestamp(6)
  nominal_deposit                                 Decimal        @default(0) @db.Decimal(18, 3)
  invoice                                         invoice[]
  organization_organization_user_createdTouser    organization[] @relation("organization_user_createdTouser")
  site                                            site[]
  organization_user_id_organizationToorganization organization?  @relation("user_id_organizationToorganization", fields: [id_organization], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_role                                       user_role[]
}

model user_role {
  id         String    @id(map: "user_role_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_user    String    @db.Uuid
  role_name  String    @default("admin")
  domain     String    @default("*")
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  user       user      @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}